<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Cool Code</title>
 <link href="http://imagle.github.io//atom.xml" rel="self"/>
 <link href="http://imagle.github.io/"/>
 <updated>2014-07-16T23:17:20+08:00</updated>
 <id>http://imagle.github.io/</id>
 <author>
   <name>Jerry</name>
   <email>wangrq2008@gmail.com</email>
 </author>

 
 <entry>
   <title>Mysql主从同步</title>
   <link href="http://imagle.github.io//2014/06/15/mysql-master-slave-replication"/>
   <updated>2014-06-15T00:00:00+08:00</updated>
   <id>http://imagle.github.io//2014/06/15/mysql-master-slave-replication</id>
   <content type="html">
&lt;p&gt;在公司中一般对数据库都会有2份实时备份，实现就是用的mysql的复制（replication）。用于线上的数据库称为主库，也即是所说的master，其余的2份实时备份就是slave，如何配置请看下面介绍。 &lt;/p&gt;

&lt;h5 id=&quot;section&quot;&gt;基本情况&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;机器两台：web01,web02都安装的有mysql，&lt;/li&gt;
  &lt;li&gt;目标：将web01设置为master，web02设置为slave，需要同步web01上面的名为syncDB的数据库。 &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-1&quot;&gt;开始设置&lt;/h5&gt;

&lt;h4 id=&quot;myconf&quot;&gt;一、首先设置my.conf&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;web01的my.conf&lt;/strong&gt; &lt;br /&gt;
 server-id=1     #0表示拒绝一切从库，1表示主，大于1都都为从，每个机器此id必须唯一&lt;br /&gt;
 log-bin=/data/data/mysql/binlog/binlog     #binlog的存放路径&lt;br /&gt;
 binlog-do-db=rrdb #需要同步的数据库&lt;br /&gt;
 binlog-ignore-db=mysql, information_schema #不需要同步的数据库  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;web02的my.conf&lt;/strong&gt; 
 server-id=2&lt;br /&gt;
 log-bin=/data/data/mysql/binlog/binlog&lt;br /&gt;
 replicate-do-db= rrdb&lt;br /&gt;
 replicate-ignore-db=mysql,information_schema  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;重启web01和web02机器的mysql&lt;/strong&gt; &lt;br /&gt;
 mysqladmin -uroot shutdown  mysqld_safe &amp;amp;  &lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;section-2&quot;&gt;二、在主库中创建需要同步的账号并对其赋权限&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;在 &lt;strong&gt;web01&lt;/strong&gt; 机器上执行如下命令： 
 mysql&amp;gt; GRANT REPLICATION SLAVE ON &lt;em&gt;.&lt;/em&gt; TO ‘replication’@’%’ identified by ‘password’;&lt;br /&gt;
 mysql&amp;gt; flush privleges&lt;br /&gt;
 $mysqldump -uroot syncDB &amp;gt;mdb.sql&lt;br /&gt;
 mysql&amp;gt; show master status\G; &lt;br /&gt;
 记下binlog文件和position&lt;br /&gt;
 如果主库数据更新频繁的话，需要执行&lt;code&gt;mysql&amp;gt; FLUSH TABLES WITH READ LOCK;&lt;/code&gt;  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;到 &lt;strong&gt;web02&lt;/strong&gt; 机器上将上面的sql导入到从库中&lt;br /&gt;
 $ mysql -uroot syncDB &amp;lt; mdb.sql&lt;br /&gt;
 在 &lt;strong&gt;web02&lt;/strong&gt; 上执行如下命令:&lt;br /&gt;
 mysql&amp;gt; change master to master_host = “web01 ip address”, master_user = ‘replication’, master_password = ‘renrenshuo’, master_log_file = ‘binlog.0000xx’, master_log_pos = position;&lt;br /&gt;
 mysql&amp;gt; start slave;在 &lt;strong&gt;web01&lt;/strong&gt; 上(可选和上述lock步骤对应) &lt;code&gt;mysql&amp;gt; unlock tables;&lt;/code&gt;  &lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;section-3&quot;&gt;三、验证&lt;/h4&gt;
&lt;p&gt;在 &lt;strong&gt;web01&lt;/strong&gt; 上  &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;验证replication@‘%’的权限&lt;code&gt;mysql&amp;gt;select User, Host from mysql.user;&lt;/code&gt;， 如图&lt;br /&gt;
  &lt;img src=&quot;http://imagle.github.io/static/img/replication.png&quot; alt=&quot;picture-example_01&quot; /&gt;   &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;验证master的状态&lt;code&gt;mysql&amp;gt; show master status\G;&lt;/code&gt;,如图&lt;br /&gt;
  &lt;img src=&quot;http://imagle.github.io/static/img/master-status.png&quot; alt=&quot;picture-example_01&quot; /&gt;  &lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在 &lt;strong&gt;web02&lt;/strong&gt; 上  &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;查看slave机器的进程&lt;code&gt;mysql&amp;gt;show processlist;&lt;/code&gt;，如图&lt;br /&gt;
  &lt;img src=&quot;http://imagle.github.io/static/img/master-status.png&quot; alt=&quot;picture-example_01&quot; /&gt;  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;查看slave机器状态，&lt;code&gt;mysql&amp;gt; show slave status\G;&lt;/code&gt;，如图&lt;br /&gt;
  &lt;img src=&quot;http://imagle.github.io/static/img/slave-status.png&quot; alt=&quot;picture-example_01&quot; /&gt; &lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;只有当上图中的&lt;code&gt;Slave_IO_Running:Yes&lt;/code&gt;和 &lt;code&gt;Slave_SQL_Running:Yes&lt;/code&gt; 均为 &lt;strong&gt;Yes&lt;/strong&gt; 时，说明配置成功。 &lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;我开通了微信公众号–&lt;strong&gt;分享技术之美&lt;/strong&gt;，我会不定期的分享一些我学习的东西.&lt;br /&gt;
你可以搜索公众号：&lt;strong&gt;swalge&lt;/strong&gt; 或者扫描下方二维码关注我&lt;br /&gt;
&lt;img src=&quot;http://imagle.github.io/static/img/photo.jpg&quot; alt=&quot;关注&quot; /&gt;  &lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>最长回文子串的O(n)算法</title>
   <link href="http://imagle.github.io//2014/04/23/Longest-palindrome-substring"/>
   <updated>2014-04-23T00:00:00+08:00</updated>
   <id>http://imagle.github.io//2014/04/23/Longest-palindrome-substring</id>
   <content type="html">
&lt;p&gt;首先讲讲什么是回文, 看看Wiki是怎么说的：回文，亦称回环，是正读反读都能读通的句子，亦有将文字排列成圆圈者，是一种修辞方式和文字游戏。回环运用得当，可以表现两种事物或现象相互依靠或排斥的关系， 比如madam，abba，这样正反都一样的串就是回文串。&lt;/p&gt;

&lt;p&gt;今天要写的问题了就是在一个字符串中找出最长的回文字串，比如串：”abcdedabakml”，它的最长回文字串就是”abcdedaba”。一般的方法有暴力法，动态规划法，今天来写一个时间复杂度为O(n)的算法。  &lt;/p&gt;

&lt;p&gt;回文匹配，一般情况会分奇数和偶数来分开进行设计算法来统计，今天介绍的算法重新构造了一个字符串，这个新字符串消除了之前的奇偶差别，使得只用设计一种算法就可以。 &lt;/p&gt;

&lt;h5 id=&quot;t&quot;&gt;1. 首先，构造新的字符串T&lt;/h5&gt;
&lt;p&gt;构造方法：在原字符串S的首尾和每个字符之间加入一个特殊字符’#’, 例如S: abba， 则构造后为T: #a#b#b#a#(注：在程序中为防止越界会在首尾再加两个字符，即^#a#b#b#a#$);  &lt;/p&gt;

&lt;h5 id=&quot;section&quot;&gt;2. 关键算法：&lt;/h5&gt;

&lt;p&gt;a[ ]: a[i]代表以位置 i 为中心向左向右可扩展的长度&lt;br /&gt;
mid: 当前取得最大回文的中心位置(下面例子用 m 表示)&lt;br /&gt;
R： 以 mid 为中心，向右扩展 a[mid] 位的最右位置&lt;br /&gt;
j:  与 i 关于 mid 对称的位置  &lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;i&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;T&lt;/td&gt;
      &lt;td&gt;^&lt;/td&gt;
      &lt;td&gt;#&lt;/td&gt;
      &lt;td&gt;a&lt;/td&gt;
      &lt;td&gt;#&lt;/td&gt;
      &lt;td&gt;b&lt;/td&gt;
      &lt;td&gt;#&lt;/td&gt;
      &lt;td&gt;b&lt;/td&gt;
      &lt;td&gt;#&lt;/td&gt;
      &lt;td&gt;a&lt;/td&gt;
      &lt;td&gt;#&lt;/td&gt;
      &lt;td&gt;$&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;a&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;m&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;R&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;此算法的关键之处在于: 当 i&amp;lt;R时，a[i] 有如下简便计算公式&lt;code&gt;a[i] = min(R-i, a[j])&lt;/code&gt;:  &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;A. 当&lt;code&gt;R - i &amp;gt; a[j]&lt;/code&gt;的时候，以T[j]为中心的回文子串包含在以T[mid]为中心的回文子串中，由于 i 和 j 对称，以T[i]为中心的回文子串必然包含在以T[mid]为中心的回文子串中，所以必有 &lt;code&gt;a[i] = a[j]&lt;/code&gt;, 如下图：此时&lt;code&gt;a[i] = a[j] = 1;&lt;/code&gt;&lt;br /&gt;
&lt;img src=&quot;http://imagle.github.io/static/img/palindromicsubstring-01.png&quot; alt=&quot;picture:palindrome&quot; /&gt;  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;B. 当 &lt;code&gt;R - i &amp;lt; a[j]&lt;/code&gt; 的时候，以T[j]为中心的回文子串不一定完全包含于以T[mid]为中心的回文子串中，但是基于对称性可知，下图中两个绿框所包围的部分是相同的，也就是说以S[i]为中心的回文子串，其向右至少会扩张到 R 的位置，也就是说 &lt;code&gt;a[i] &amp;gt;= R-i&lt;/code&gt;。至于R之后的部分是否对称，就只能老老实实去匹配了。&lt;br /&gt;
&lt;img src=&quot;http://imagle.github.io/static/img/palindromicsubstring-02.png&quot; alt=&quot;picture:palindrome&quot; /&gt;  &lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-1&quot;&gt;3. 得到所求字符串&lt;/h5&gt;

&lt;p&gt;找出 &lt;code&gt;a[ ]&lt;/code&gt; 数组中最大的值及其下标，记为&lt;code&gt;max&lt;/code&gt;和&lt;code&gt;index&lt;/code&gt;。&lt;br /&gt;
所求字符串为&lt;code&gt;string(s, (index-1-max)/2, max)&lt;/code&gt;  &lt;/p&gt;

&lt;h5 id=&quot;section-2&quot;&gt;4, 算法实现&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;// Transform S into T.
// For example, S = &quot;abba&quot;, T = &quot;^#a#b#b#a#$&quot;.
// ^ and $ signs are sentinels appended to each end to avoid bounds checking
string preProcess(string s) {
    int n = s.length();
    if (n == 0) return &quot;^$&quot;;
    string ret = &quot;^&quot;;
    for (int i = 0; i &amp;lt; n; i++)
        ret += &quot;#&quot; + s.substr(i, 1);
    ret += &quot;#$&quot;;
    return ret;
}

string longestPalindrome(string s) {
    string T = preProcess(s);
    int n = T.length();
    int *a = new int[n];
    int mid = 0, R = 0;
    for (int i = 1; i &amp;lt; n-1; i++) {
        int j = 2*mid-i; // 找到i关于mid对称的位置    
        a[i] = (R &amp;gt; i) ? min(R-i, a[j]) : 0;
        // Attempt to expand palindrome centered at i
        while (T[i + 1 + a[i]] == T[i - 1 - a[i]])
            a[i]++;
        // If palindrome centered at i expand past R,
        // adjust center based on expanded palindrome.
        if (i + a[i] &amp;gt; R) {
            mid = i;
            R = i + a[i];
        }
    }
    // Find the maximum element in a.
    int maxLen = 0;
    int centerIndex = 0;
    for (int i = 1; i &amp;lt; n-1; i++) {
        if (a[i] &amp;gt; maxLen) {
            maxLen = a[i];
            centerIndex = i;
        }
    }
    delete[] a;  
    return s.substr((centerIndex - 1 - maxLen)/2, maxLen);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;参考文章&lt;/strong&gt;:&lt;br /&gt;
    http://leetcode.com/2011/11/longest-palindromic-substring-part-ii.html&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;我开通了微信公众号–&lt;strong&gt;分享技术之美&lt;/strong&gt;，我会不定期的分享一些我学习的东西.&lt;br /&gt;
你可以搜索公众号：&lt;strong&gt;swalge&lt;/strong&gt; 或者扫描下方二维码关注我&lt;br /&gt;
&lt;img src=&quot;http://imagle.github.io/static/img/photo.jpg&quot; alt=&quot;关注&quot; /&gt;  &lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>论C++的STL源码中关于堆算法的那些事</title>
   <link href="http://imagle.github.io//2014/04/22/Something-about-Heap-in-STL-of-C++"/>
   <updated>2014-04-22T00:00:00+08:00</updated>
   <id>http://imagle.github.io//2014/04/22/Something-about-Heap-in-STL-of-C++</id>
   <content type="html">
&lt;p&gt;关于堆，我们肯定熟知的就是它排序的时间复杂度在几个排序算法里面算是比较靠上的O(nlogn)经常会拿来和快速排序和归并排序讨论，而且它还有个优点是它的空间复杂度为O(1), 但是STL中没有给我们提供像vector, deque, stack, queue之类的数据结构供我们使用，但在C++STL中却提供了一些列的算法，让我们依旧可以使用堆，比如make_heap(), push_heap(), pop_heap(), sort_heap()。今天就来论论这几个算法，在介绍上述算法之前先引入两个关于堆的算法，上述四个算法本质上都使用引入的两个算法。 &lt;/p&gt;

&lt;h4 id=&quot;section&quot;&gt;一、关于堆的两个算法&lt;/h4&gt;

&lt;p&gt;1.&lt;strong&gt;堆的插入算法&lt;/strong&gt;&lt;br /&gt;
下面先看个例子，一个数组a[]={1,9,5,13},建一个最大堆，下图为过程&lt;br /&gt;
&lt;img src=&quot;http://imagle.github.io/static/img/heap1.png&quot; alt=&quot;picture:build max heap&quot; /&gt;&lt;br /&gt;
从图中可以看出每插入一个元素，调整后都是一个最大堆，而且是插入到最后一个上(假设数组是可以动态增长的)，这样是从下往上进行调整(percolate up)，这样的调整算法叫插入法, 下面来看看插入法的代码实现：  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void insert_heap(int a[], int i){  
    while(i&amp;gt;0){  
        int j=(i-1)/2;  
        if(a[i] &amp;lt; a[j]){  
            swap(a[i], a[j]);  
            i=j;  
        }  
        else break;  
    }  
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2. &lt;strong&gt;堆的筛选法&lt;/strong&gt;&lt;br /&gt;
还是先看个例子&lt;br /&gt;
例：a[]={1, 9, 5, 13}, 排序过程如下图:&lt;br /&gt;
&lt;img src=&quot;http://imagle.github.io/static/img/heap2.png&quot; alt=&quot;picture:siftheap&quot; /&gt;&lt;br /&gt;
像这样一次自上而下的调整过程，叫做筛选法， 算法实现:  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void sift_heap(int a[], int i){
    // j 是 i 的左孩子
    int j=2*i+1;
    int n = strlen(a);
    while(j&amp;lt;n){
        if(j&amp;lt;n-1 &amp;amp;&amp;amp; a[j]&amp;lt;a[j+1]) ++j;
        if(a[i]&amp;lt;a[j]){
            swap(a[i],a[j]);
            i=j;
            j=2*i+1;
        }
        else
            break;
    }
}
void build_heap(int a[], int n){
    int i=n/2;
    //循环完后，就建立了一个最大堆
    for(; i&amp;gt;=0; ++i){
        sift_heap(a, i);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;stlxxxxheap&quot;&gt;二、STL算法中的xxxx_heap算法&lt;/h4&gt;

&lt;p&gt;stl中的关于堆的算法都是在vector上实现的，并且实现的最大堆，且最大的元素位于数组的第一个位置。&lt;br /&gt;
1.&lt;strong&gt;push_heap&lt;/strong&gt;&lt;br /&gt;
首先来看看STL中的该算法的实现，该算法实现在stl_heap.h文件中，再此函数被调用的时候，新元素已经插入到底部容器的最尾端。  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;template &amp;lt;class RandomAccessIterator, class Compare&amp;gt;
inline void push_heap(RandomAccessIterator first, RandomAccessIterator last){
    __push_heap_aux(first, last, distance_type(first), value_type(first));
}
template &amp;lt;class RandomAccessIterator, class Distance, class T&amp;gt;
inline void __push_heap_aux(RandomAccessIterator first, RandomAccessIterator last, Distance*, T*) {
    __push_heap(first, Distance((last - first) - 1), Distance(0), T(*(last - 1)));
}
template &amp;lt;class RandomAccessIterator, class Distance, class T&amp;gt;
void __push_heap(RandomAccessIterator first, Distance holeIndex, Distance topIndex, T value) {
    Distance parent = (holeIndex - 1) / 2;
    while (holeIndex &amp;gt; topIndex &amp;amp;&amp;amp; *(first + parent) &amp;lt; value) {
        *(first + holeIndex) = *(first + parent);
        holeIndex = parent;
        parent = (holeIndex - 1) / 2;
    }   
    *(first + holeIndex) = value;
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到push_heap算法最终调用的是__push_heap，算法内部都用的是迭代器，first是指向堆顶的迭代器，holeIndex指的新插入元素位置距离堆顶的距离，first+topIndex是该堆顶的位置，topIndex是距离， value是新插入的元素的值。&lt;br /&gt;
可以看出__push_heap就是我们介绍的第一种堆算法—-插入法。  &lt;/p&gt;

&lt;p&gt;2.&lt;strong&gt;__adjust_heap&lt;/strong&gt;&lt;br /&gt;
在详细介绍pop_heap, sort_heap, make_heap三个算法前先来介绍另一个算法__adjust_heap，__adjust_heap函数定义如下:  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;template &amp;lt;class RandomAccessIterator, class Distance, class T&amp;gt;
void __adjust_heap(RandomAccessIterator first, Distance holeIndex, Distance len, T value) {
    Distance topIndex = holeIndex;
    Distance secondChild = 2 * holeIndex + 2; //得到右孩子节点
    while (secondChild &amp;lt; len) {
        if (*(first + secondChild) &amp;lt; *(first + (secondChild - 1)))  //选择左右孩子中的较大节点
            secondChild--;
        *(first + holeIndex) = *(first + secondChild);
        holeIndex = secondChild;
        secondChild = 2 * (secondChild + 1);
    }
    if (secondChild == len) {
        *(first + holeIndex) = *(first + (secondChild - 1));
        holeIndex = secondChild - 1;
    }
    //此时没有满足整个堆的性质，需要再从下往上调整一次
    __push_heap(first, holeIndex, topIndex, value);
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通过将该算法和介绍的第二个算法相比，可知这个算法就是筛选法。  &lt;/p&gt;

&lt;p&gt;3.&lt;strong&gt;pop_heap&lt;/strong&gt;&lt;br /&gt;
pop_heap算法并不是将堆顶元素删除，而只是将其移到堆的最后，然后调整堆的时候按照len=len-1, 来进行调整，调整后之前最大的元素放在了容器的最后，可以用back()得到。&lt;br /&gt;
函数定义如下  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;template &amp;lt;class RandomAccessIterator&amp;gt;
inline void pop_heap(RandomAccessIterator first, RandomAccessIterator last) {
    __pop_heap_aux(first, last, value_type(first));
}
template &amp;lt;class RandomAccessIterator, class T&amp;gt;
inline void __pop_heap_aux(RandomAccessIterator first, RandomAccessIterator last, T*) {
    __pop_heap(first, last - 1, last - 1, T(*(last - 1)), distance_type(first));
}
template &amp;lt;class RandomAccessIterator, class T, class Distance&amp;gt;
inline void __pop_heap(RandomAccessIterator first, RandomAccessIterator last, RandomAccessIterator result, T value, Distance*) {
    *result = *first;
    __adjust_heap(first, Distance(0), Distance(last - first), value);
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看出pop_heap最后调用的是__adjust_heap。  &lt;/p&gt;

&lt;p&gt;4.&lt;strong&gt;sort_heap&lt;/strong&gt;&lt;br /&gt;
sort_heap就是对堆进行排序。 从pop_heap得之，它每次可获得heap中键值最大的元素，如果持续对整个heap做pop_heap操作，每次将操作范围从后向前缩减一个元素，当整个程序执行完毕时，数组就是按照从大到小的顺序递增，下面是实际代码:  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;template &amp;lt;class RandomAccessIterator&amp;gt;
void sort_heap(RandomAccessIterator first, RandomAccessIterator last) {
    while (last - first &amp;gt; 1) pop_heap(first, last--);
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5.&lt;strong&gt;make_heap&lt;/strong&gt;&lt;br /&gt;
make_heap用来将一段现有的数据转化为一个heap，下面是具体实现：  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;template &amp;lt;class RandomAccessIterator, class Compare&amp;gt;
inline void make_heap(RandomAccessIterator first, RandomAccessIterator last, Compare comp) {
    __make_heap(first, last, comp, value_type(first), distance_type(first));
}
template &amp;lt;class RandomAccessIterator, class Compare, class T, class Distance&amp;gt;
void __make_heap(RandomAccessIterator first, RandomAccessIterator last, Compare comp, T*, Distance*) {
    if (last - first &amp;lt; 2) return; // 长度为0或1，就返回；
    Distance len = last - first;
    //找到第一个调整的节点
    Distance parent = (len - 2)/2;    
    while (true) {
        __adjust_heap(first, parent, len, T(*(first + parent)), comp);
        if (parent == 0) return;
        parent--;
    }
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看见，该算法是从len/2开始调整，一直到parent为0，这就是我在上面第一部分的筛选法时候举的例子。&lt;br /&gt;
注： 以上所列出的STL算法均为SGI STL并且，列出的均为不能只能排序规则的一组。  &lt;/p&gt;

&lt;h4 id=&quot;stl&quot;&gt;三、STL中堆的应用&lt;/h4&gt;
&lt;p&gt;虽然stl中没有提供堆这个数据结构，但是priority queue的内部确是由堆来实现的。priority queue允许用户以任何次序将任何元素推入容器内，但取出的时候一定是从优先权最高的元素开始取。binary heap正好具有这样的特性。为了平衡各个操作的时间复杂度和实现的复杂度，binary heap适合作为priority queue的底层机制。下面贴一个priority_queue的完整实现代码，请注意在几个构造函数中都使用了make_heap算法，在push函数中使用了push_heap算法，在pop中使用了pop_heap算法：  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#ifndef __STL_LIMITED_DEFAULT_TEMPLATES
template &amp;lt;class T, class Sequence = vector&amp;lt;T&amp;gt;, 
          class Compare = less&amp;lt;typename Sequence::value_type&amp;gt; &amp;gt;
#else
template &amp;lt;class T, class Sequence, class Compare&amp;gt;
#endif
class  priority_queue {
public:
  typedef typename Sequence::value_type value_type;
  typedef typename Sequence::size_type size_type;
  typedef typename Sequence::reference reference;
  typedef typename Sequence::const_reference const_reference;
protected:
  Sequence c;
  Compare comp;
public:
  priority_queue() : c() {}
  explicit priority_queue(const Compare&amp;amp; x) :  c(), comp(x) {}

#ifdef __STL_MEMBER_TEMPLATES
  template &amp;lt;class InputIterator&amp;gt;
  priority_queue(InputIterator first, InputIterator last, const Compare&amp;amp; x)
    : c(first, last), comp(x) { make_heap(c.begin(), c.end(), comp); }
  template &amp;lt;class InputIterator&amp;gt;
  priority_queue(InputIterator first, InputIterator last) 
    : c(first, last) { make_heap(c.begin(), c.end(), comp); }
#else /* __STL_MEMBER_TEMPLATES */
  priority_queue(const value_type* first, const value_type* last, 
                 const Compare&amp;amp; x) : c(first, last), comp(x) {
    make_heap(c.begin(), c.end(), comp);
  }
  priority_queue(const value_type* first, const value_type* last) 
    : c(first, last) { make_heap(c.begin(), c.end(), comp); }
#endif /* __STL_MEMBER_TEMPLATES */

  bool empty() const { return c.empty(); }
  size_type size() const { return c.size(); }
  const_reference top() const { return c.front(); }
  void push(const value_type&amp;amp; x) {
    __STL_TRY {
      c.push_back(x); 
      push_heap(c.begin(), c.end(), comp);
    }
    __STL_UNWIND(c.clear());
  }
  void pop() {
    __STL_TRY {
      pop_heap(c.begin(), c.end(), comp);
      c.pop_back();
    }
    __STL_UNWIND(c.clear());
  }
};

// no equality is provided

__STL_END_NAMESPACE

#endif /* __SGI_STL_INTERNAL_QUEUE_H */
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;
&lt;p&gt;我开通了微信公众号–&lt;strong&gt;分享技术之美&lt;/strong&gt;，我会不定期的分享一些我学习的东西.&lt;br /&gt;
你可以搜索公众号：&lt;strong&gt;swalge&lt;/strong&gt; 或者扫描下方二维码关注我&lt;br /&gt;
&lt;img src=&quot;http://imagle.github.io/static/img/photo.jpg&quot; alt=&quot;关注&quot; /&gt;  &lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>ubuntu12.04中eclipse提示框背景为黑色的解决方法</title>
   <link href="http://imagle.github.io//2014/04/21/How-to-solve-eclipse's-Black-background-of-Prompt-box-in-Ubuntu-12_04"/>
   <updated>2014-04-21T00:00:00+08:00</updated>
   <id>http://imagle.github.io//2014/04/21/How-to-solve-eclipse's-Black-background-of-Prompt-box-in-Ubuntu-12_04</id>
   <content type="html">
&lt;p&gt;前段时间和一个朋友聊天，由于他要在Ubuntu下面用eclipse进行编码，但是遇到一个问题—eclipse的提示框的背景是黑色的导致可视性非常的差, 我就给他说我当时也遇到过这个问题，我也费了很大的劲最后找到解决方法怎么解决的。相信会有很多朋友会遇到这样的问题，这就样本文就诞生了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;问题描述:&lt;/strong&gt;&lt;br /&gt;
当我们在ubuntu下面使用eclipse编程的时候，需要查看相应的代码的结构等信息，但是当我们把鼠标放到我们想看的代码上面的时候，出现了一个大黑框，然后鼠标点击相应的块才能看见相应的文字，其他的全是黑色无法看见，导致心里很不爽，如下图：
&lt;img src=&quot;http://imagle.github.io/static/img/eclipse-linux-01.png&quot; alt=&quot;picture:eclipse-linux-01&quot; /&gt;  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;问题分析:&lt;/strong&gt;&lt;br /&gt;
出现这个问题的原因主要是由于Ubuntu（12.04）中默认的主题为Ambiance，这个主题的tooltip默认设置前景(foreground)色为黑色(#ffffff)，背景(background)色为白色(#000000)，所以才出现这个问题。当然一般我们解决这个问题的方法是更换主题就好了，但是这样做不能根本的解决问题，下面我们介绍一种能够不更换主题，手工修改的解决方法。 &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;解决方法：&lt;/strong&gt;  &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;dl&gt;
      &lt;dt&gt;1. 进入系统用户主题目录&lt;/dt&gt;
      &lt;dd&gt;&lt;code&gt;$ cd /usr/share/themes/&lt;/code&gt;&lt;/dd&gt;
    &lt;/dl&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;dl&gt;
      &lt;dt&gt;2. 选择使用的主题，进入该主题目录，以Ambiance为例&lt;/dt&gt;
      &lt;dd&gt;&lt;code&gt;$ cd Ambiance&lt;/code&gt;&lt;/dd&gt;
    &lt;/dl&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;dl&gt;
      &lt;dt&gt;3. 修改主题配置gtk-2.0/gtkrc&lt;/dt&gt;
      &lt;dd&gt;&lt;code&gt;$ sudo vi gtk-2.0/gtkrc&lt;/code&gt;
  &lt;img src=&quot;http://imagle.github.io/static/img/eclipse-linux-02.png&quot; alt=&quot;picture:eclipse-linux-02&quot; /&gt;&lt;/dd&gt;
    &lt;/dl&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;4. 修改tooltip的前景色(tooptip_fg_color)和背景色(tooptip_bg_color)&lt;br /&gt;
  &lt;code&gt;tooltip_fg_color:#000000&lt;/code&gt;&lt;br /&gt;
  &lt;code&gt;tooltip_bg_color:#c5e0b3&lt;/code&gt; (该颜色模式RGB为：R:197, G:224, B:179; 若想改为windows下面的淡黄色则为#f2edbc)&lt;/p&gt;

    &lt;p&gt;注：若上述gitrc文件中没有tooltip的配置，则可以自己添加上述配置。
  &lt;img src=&quot;http://imagle.github.io/static/img/eclipse-linux-03.png&quot; alt=&quot;picture:eclipse-linux-03&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;5. 保存退出，并且在系统设置—&amp;gt;外观—&amp;gt;主题的中切换下主题，然后在切换回来，就Okay了，如下图：
  &lt;img src=&quot;http://imagle.github.io/static/img/eclipse-linux-04.png&quot; alt=&quot;picture:eclipse-linux-04&quot; /&gt;  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;p&gt;我开通了微信公众号–&lt;strong&gt;分享技术之美&lt;/strong&gt;，我会不定期的分享一些我学习的东西.&lt;br /&gt;
你可以搜索公众号：&lt;strong&gt;swalge&lt;/strong&gt; 或者扫描下方二维码关注我&lt;br /&gt;
&lt;img src=&quot;http://imagle.github.io/static/img/photo.jpg&quot; alt=&quot;关注&quot; /&gt;  &lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>字符串匹配之BF---暴力破解法</title>
   <link href="http://imagle.github.io//2014/04/19/string-match-bf-strstr"/>
   <updated>2014-04-19T00:00:00+08:00</updated>
   <id>http://imagle.github.io//2014/04/19/string-match-bf-strstr</id>
   <content type="html">
&lt;p&gt;写完第一篇字符串匹配文章，发现竟然没有介绍啥是字符串匹配算法，啥是KMP，直接就开讲KMP的next数组有点唐突。而在我打算写第二篇的时候发现，我们为什么要有KMP算法，它到底比普通的算法好在哪里？回过头来想想应该把普通的暴力法也写写，这样才能明白它们的好。同时，不要以为它是暴力法就认为它不好，你没必要掌握它。同学，你知道吗？几乎所有标准库中类似字符串匹配的函数(如: java-indexof)都是采用的我们今天要将的BF(Brute Force)方法，原因见&lt;a href=&quot;http://stackoverflow.com/questions/23146845/indexof-method-of-string-class-in-jdk-is-implemented-by-using-bf-why-not-use-km?noredirect=1#comment35393536_23146845&quot;&gt;StackOverflow&lt;/a&gt;。  &lt;/p&gt;

&lt;p&gt;好，下面首先正式把问题摆出来，给定两个串S=”s0, s1, s2, …., sn”, T=”t0, t1, t2,…, tn”, 在主串S中查找字串T的过程称为字符串匹配问题，T称为模式串。  &lt;/p&gt;

&lt;h4 id=&quot;section&quot;&gt;一、算法简介&lt;/h4&gt;

&lt;p&gt;BF(Brute Force)算法，应该很容易写出来，下面先给出伪码： &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1. 首先设定 S 和 T 的起始比较下标 i 和 j；&lt;/li&gt;
  &lt;li&gt;2. 循环直到 i+m&amp;gt;n 或者T中的字符都比较完(j==m)&lt;/li&gt;
  &lt;li&gt;
    &lt;ul&gt;
      &lt;li&gt;2.1 如果S[i]==T[j], 继续比较S和T的下一个字符，否则&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;ul&gt;
      &lt;li&gt;2.2 将 i 和 j 回溯，准备下一轮比较&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;3. 如果T中的字符都比较完(j==m)，则返回比较的起始下标&lt;/li&gt;
  &lt;li&gt;
    &lt;ul&gt;
      &lt;li&gt;否则返回-1，表示匹配失败  &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-1&quot;&gt;二、算法实现&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;int strStr(const char *S, const char *T){
    if(S==NULL||T==NULL) return -1;
    int n = strlen(S);
    int m = strlen(T);
    int i=0;
    while( i+m&amp;lt;=n){
        int k=i, j=0;
        for(; j&amp;lt;m&amp;amp;&amp;amp;k&amp;lt;n&amp;amp;&amp;amp;S[k]==T[j]; ++k,++j) ;
        if(j==m) return i;  //  匹配成功，返回比较开始位置
        ++i;
    }
    return -1;   // 匹配失败
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;section-2&quot;&gt;三、实例&lt;/h4&gt;
&lt;p&gt;假定给定主串 S=”ababcabcacbab”, 模式 T=”abcac”, BF匹配过程如下：&lt;br /&gt;
&lt;img src=&quot;http://imagle.github.io/static/img/bf-strstr-01.png&quot; alt=&quot;picture-example-01&quot; /&gt;  &lt;/p&gt;

&lt;h4 id=&quot;bf&quot;&gt;四、BF算法的缺点&lt;/h4&gt;
&lt;p&gt;BF算法的优点就是简单可靠，这跟现实中的东西一样，越简单的东西越是信得过的(纯属娱乐:东哥也说了’她是我见过的最单纯的女孩’)，可见简单就是好，而复杂的东西限制要求多。&lt;br /&gt;
BF算法的确定就是一遇到比较失败的时候就需要回退到前面重新开始比较，之前比较匹配过的信息完全用不上，一句话就是不智能嘛。  &lt;/p&gt;

&lt;h4 id=&quot;bfkmpbm&quot;&gt;五、标准库为啥要采用BF而不采用KMP，BM喃？&lt;/h4&gt;
&lt;p&gt;打开上面StackOverflow的链接，就能见着答案，我这里把英文贴出来，为防止有些童鞋一见English就头大，大概翻译了下。  &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The more advanced string search algorithms have a non-trivial setup time. If you are doing a once-off string search involving a not-too-large target string, you will find that you spend more time on the setup than you save during the string search.And even just testing the lengths of the target and search string is not going to give a good answer as to whether it is “worth it” to use an advanced algorithm. The actual speedup you get from (say) Boyer-Moore depends on the values of the strings; i.e. the character patterns.&lt;br /&gt;
The Java implementors have take the pragmatic approach. They cannot guarantee that an advanced algorithm will give better performance, either on average, or for specific inputs. Therefore they have left it to the programmer to deal with … where necessary. &lt;br /&gt;
 大概意思就是，像KMP，BM这些高级算法的会有预处理时间和会消耗一些空间，在处理一些不是非常大的字符串的时候，时间不会有太大优势，而且还会占用一些空间。   &lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;
&lt;p&gt;我开通了微信公众号–&lt;strong&gt;分享技术之美&lt;/strong&gt;，我会不定期的分享一些我学习的东西.&lt;br /&gt;
你可以搜索公众号：&lt;strong&gt;swalge&lt;/strong&gt; 或者扫描下方二维码关注我&lt;br /&gt;
&lt;img src=&quot;http://imagle.github.io/static/img/photo.jpg&quot; alt=&quot;关注&quot; /&gt;  &lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>字符串匹配之KMP---全力解析</title>
   <link href="http://imagle.github.io//2014/04/18/string-match-kmp-strstr"/>
   <updated>2014-04-18T00:00:00+08:00</updated>
   <id>http://imagle.github.io//2014/04/18/string-match-kmp-strstr</id>
   <content type="html">
&lt;p&gt;近日，一同学面试被问到字符串匹配算法，结果由于他使用了暴力法，直接就跪了(现在想想这样的面试官真的是不合格的，陈皓的一篇文章说的很好，&lt;a href=&quot;http://coolshell.cn/articles/8138.html&quot;&gt;点击阅读&lt;/a&gt;)。字符串匹配方法大概有：BF(暴力破解法), 简化版的BM，KMP，BM，一般情况下，大家听说最多的应该就是KMP算法了。之前学习过，由于时间间隔比较大，记不太清楚了，今天上网查了下，发现写KMP的文章是不少，但是真正清晰简洁就没有了(july的文章太繁琐)，所以自己就研究了一晚上，弄清楚了kmp的计算过程，也就在此分享下。&lt;/p&gt;

&lt;p&gt;首先，如果你现在完全不知道KMP是个神马玩意，请先阅读 阮一峰 的&lt;a href=&quot;http://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html&quot;&gt;《字符串匹配的KMP算法》&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;KMP算法最难理解的是就是next数组的计算过程，在此分享下我所理解的kmp算法以及next数组的计算过程(如果看前面理论比较头大，可以先看后面例子的计算过程，在回过头来看理论就会释怀)：  &lt;/p&gt;

&lt;h4 id=&quot;next&quot;&gt;一、next数组的计算过程:&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;申明&lt;/strong&gt;:  next数组下标从0算起, 定义next[0]=-1, next[1]=0; 模式串记为T[ ]
假如求 T中 j+1 位的next[j+1]：&lt;br /&gt;
将其前一位(模式字符)的内容与其前一位的next值(next[j])的内容(T[next[j]])进行比较：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如果它们相等(T[j]==T[next[j]])，则next[j+1] = next[j]+1;&lt;/li&gt;
  &lt;li&gt;如果他们不相等，则继续向前寻找，直到找到next值对应的内容与前一位相等为止，则在这个next值上加一;&lt;/li&gt;
  &lt;li&gt;如果直到第一位都没有与之相等，则next[j+1] = 0;&lt;br /&gt;
  例: 有模式串 “abaababc”&lt;br /&gt;
  j=0时，next[0] = -1 ; j=1时，next[1] = 0;&lt;br /&gt;
  j=2时，t1!=t0, k=next[0]=-1, next[2]=0;&lt;br /&gt;
  j=3时，t2==t0, next[3] = next[2]+1 = 1;&lt;br /&gt;
  j=4时，k=next[3]=1, t3!=T[1], k=next[1]=0, T[3]==T[0], next[4]=next[1]+1 = 1;&lt;br /&gt;
  j=5时，k=next[4]=1, T[4]==T[1], next[5]=next[4]+1=2;&lt;br /&gt;
  j=6时，k=next[5]=2, T[5]==T[2], next[6]=next[5]+1=3;&lt;br /&gt;
  j=7时，k=next[6]=3, T[6]!=T[3], k=next[3]=1, T[6]==T[1], next[7]=next[3]+1 = 2;&lt;br /&gt;
&lt;img src=&quot;http://imagle.github.io/static/img/kmp01.png&quot; alt=&quot;picture-example_01&quot; /&gt;  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section&quot;&gt;二、上述算法的实现&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;//update 2014-04-19 10:08  
void calNext(const char *T, int *next){  
    int n = strlen(T);  
    if(n&amp;lt;=0) return ;  
    next[0] = -1;  
    next[1] = 0;  
    int j=0, k=-1;  
    while(j&amp;lt;n){  
        if(k==-1 || T[j]==T[k]){  
            ++j;  
            ++k;  
            next[j] = k;  
        }  
        else  k = next[k];  
    }  
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;kmp&quot;&gt;三、KMP主算法　　&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;设置比较起始下标: i=0, j=0;&lt;/li&gt;
  &lt;li&gt;循环直到 i+m&amp;gt;n 或者 T中所有字符都以比较完毕&lt;/li&gt;
  &lt;li&gt;如果 S[i]==T[j], 则继续比较S和T的下一个字符; 否则&lt;/li&gt;
  &lt;li&gt;
    &lt;ul&gt;
      &lt;li&gt;将 j=next[j]， 从这位置开始继续进行比较;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;ul&gt;
      &lt;li&gt;如果j==-1, 则将 i 和 j 分别加1, 继续比较；&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;如果T中所有字符均比较完毕，则返回匹配的起始下标，否则返回-1；　　&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;kmp-1&quot;&gt;四、KMP算法实现:&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;//update 2014-04-19 10:08  
int kmpmatch(const char *S, const char *T){  
    if(S==NULL || T==NULL) return -1;  
    int n = strlen(S);  
    int m = strlen(T);  
    int next[m];  
    calNext(T, next);  
    int i=0, j=0;  
    while(i+m&amp;lt;=n){  
        for( ; j&amp;lt;m&amp;amp;&amp;amp;i&amp;lt;n&amp;amp;&amp;amp;S[i]==T[j]; ++i, ++j) ;  
        if(j==m) return i-m;  
        j = next[j];  
        if(j==-1){  
            ++i;  
            ++j;  
        }  
    }  
    return -1;  
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;举例： 设主串 S=”ababcabcacbab”, 模式 T=”abcac”&lt;br /&gt;
按照上述方法计算得next[]={-1,0,0,0,1}&lt;br /&gt;
&lt;img src=&quot;http://imagle.github.io/static/img/kmp02.png&quot; alt=&quot;picture-example_02&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;http://imagle.github.io/static/img/kmp03.png&quot; alt=&quot;picture-example_03&quot; /&gt;  &lt;/p&gt;

&lt;p&gt;本篇文章主要关注next数组的计算及kmp主算法的实现。&lt;br /&gt;
要了解next数组是什么？&lt;br /&gt;
为什么要这么计算next数组?&lt;br /&gt;
参见&lt;a href=&quot;http://imagle.github.io/2014/04/19/string-match-bf-strstr/&quot;&gt;下一篇文章(字符串匹配之KMP算法（续）—还原next数组 )&lt;/a&gt;.  &lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;我开通了微信公众号–&lt;strong&gt;分享技术之美&lt;/strong&gt;，我会不定期的分享一些我学习的东西.&lt;br /&gt;
你可以搜索公众号：&lt;strong&gt;swalge&lt;/strong&gt; 或者扫描下方二维码关注我&lt;br /&gt;
&lt;img src=&quot;http://imagle.github.io/static/img/photo.jpg&quot; alt=&quot;关注&quot; /&gt;  &lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Jekyll中使用google-code-prettify高亮代码</title>
   <link href="http://imagle.github.io//2013/02/27/highlight-code-with-google-code-prettify"/>
   <updated>2013-02-27T00:00:00+08:00</updated>
   <id>http://imagle.github.io//2013/02/27/highlight-code-with-google-code-prettify</id>
   <content type="html">
&lt;p&gt;这个博客，到现在换了好几个代码高亮的工具，之前的SyntaxHIghlighter虽然漂亮，无奈加载太慢，只能舍弃了。现在用的这个是google-code-prettfy，效果也相当不错。最重要的是，非常小，加载速度比SyntaxHighlighter快得多，而且，可以直接使用markdown的语法去写代码。&lt;/p&gt;

&lt;p&gt;首先需要两个文件，prettify.js和prettify.css，自己去官网去下。把这两个放到模板中，如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;link href=&quot;/assets/themes//google-code-prettify/desert.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; media=&quot;all&quot;&amp;gt;
&amp;lt;script type=&quot;text/javascript&quot; src=&quot;/assets/themes//google-code-prettify/prettify.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;考虑到加载速度，最好js写到文档末尾，body闭合标签之前，css写到头部&lt;/p&gt;

&lt;p&gt;之后，还需要加上如下代码，用于识别并高亮代码块，这个需要使用jQuery&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(function() {
  window.prettyPrint &amp;amp;&amp;amp; prettyPrint();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在，就可以使用&lt;code&gt;&amp;lt;pre&amp;gt;&amp;lt;/pre&amp;gt;&lt;/code&gt;标签进行高亮了，&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;pre class=&quot;prettyPrint&quot;&amp;gt;
// code here
&amp;lt;/pre&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但这样会有些问题，就是在书写html代码的时候，html标签会被浏览器认为是标签而不是代码的字符。而markdown的语法写的代码其实已经解决了这个问题，所以，我们可以利用如下的js代码，来避免自己用&lt;code&gt;&amp;lt;pre&amp;gt;&amp;lt;/pre&amp;gt;&lt;/code&gt;写代码所出现的问题，同样需要jQuery支持&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(function() {
  $('pre').addClass('prettyprint linenums').attr('style', 'overflow:auto');
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样之后，就没有问题了，可以直接用markdown的前置4空格来写代码了。其中&lt;code&gt;addClass('prettyprint linenums')&lt;/code&gt;的&lt;code&gt;linenums&lt;/code&gt;是添加行号的意思。默认只显示第5、10、15…行，可以在css文件中li的格式添加&lt;code&gt;list-style-type: decimal;&lt;/code&gt;，以显示全部行号&lt;/p&gt;

&lt;p&gt;另外，如果博客中有用bootstrap，其中对&lt;code&gt;pre&lt;/code&gt;有如下几句&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;white-space:pre;white-space:pre-wrap;word-break:break-all;word-wrap:break-word;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这会使得pre中的代码自动换行，而不是溢出形成滚动条。如果不希望如此，可以注释掉。就看个人的喜好了。如果是滚动条，默认的滚动太难看，可以修改一下样式，看一下&lt;a href=&quot;http://www.javascript100.com/?p=756&quot;&gt;这篇文章&lt;/a&gt;&lt;/p&gt;

</content>
 </entry>
 
 
</feed>